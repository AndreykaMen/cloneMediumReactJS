import React, { useEffect, useState, useContext } from "react";
import { Link, useLocation, useParams, Navigate } from "react-router-dom";

import useFetch from "hooks/useFetch";
import useLocalStorage from "hooks/useLocalStorage";
import { CurrentUserContext } from "contexts/currentUser";

const Authentication = () => {

  //Получаем pathname и params В новой версии routers через {useLocation, useParams}
  const location = useLocation();
  const params = useParams();

  //Проверка на какой странице находимся
  const isLogin = location.pathname === '/login';

  //Логика изменения текста Title и ссылки
  const pageTitle = isLogin ? "Sign in" : "Sign up";
  const descriptionLink = isLogin ? "/register" : "/login";
  const descriptionText = isLogin ? "Need an account?" : "Have an account?";

  const apiUrl = isLogin ? "/users/login" : "/users";

  const [email, setEmail] = useState( '' );
  const [password, setPassword] = useState( '' );
  const [username, setUsername] = useState( '' );
  const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState( false );

  const [{response, isLoading}, doFetch] = useFetch( apiUrl );
  // Состояние хук для localStorage
  const [token, setToken] = useLocalStorage( 'token' );

  const [currentUserState, setCurrentUserState] = useContext( CurrentUserContext );

  console.log( 'currentUserState', currentUserState );

  const handleSubmit = ( event ) => {
    event.preventDefault();
    const user = isLogin ? {email, password} : {email, password, username};
    doFetch( {
      method: 'post',
      data: {
        user
      }
    } );
  };

  useEffect( () => {
    if ( !response ) return;
    setToken( response.user.token );
    // меняем состояние на true после успешной регистрайции
    setIsSuccessFullSubmit( true );
    //  Добавляем setToken в массив зависимостей , потому что является функцией и в useEffect() необходимо указывать функции в качестве зависимостей. Правило хуков React
  }, [response, setToken] );

  // Редирект на главную страницу после регитсрации или авторизации
  if ( isSuccessFullSubmit ) {
    return <Navigate to="/"/>;
  }

  return (
      <div className="auth-page">
        <div className="container page">
          <div className="row">
            <div className="col-md-6 offset-md-3 col-xs-12">
              <h1 className="text-xs-center">{pageTitle}</h1>
              <p className="text-xs-center">
                <Link to={descriptionLink}>
                  {descriptionText}
                </Link>
              </p>
              <form onSubmit={handleSubmit}>
                <fieldset>

                  {!isLogin && (
                      <fieldset className="form-group">
                        <input type="text"
                               className="form-control form-control-lg"
                               placeholder="Username"
                               value={username}
                               onChange={e => setUsername( e.target.value )}
                        />
                      </fieldset>
                  )}

                  <fieldset className="form-group">
                    <input type="email"
                           className="form-control form-control-lg"
                           placeholder="Email"
                           value={email}
                           onChange={e => setEmail( e.target.value )}
                    />
                  </fieldset>
                </fieldset>
                <fieldset>
                  <fieldset className="form-group">
                    <input type="password"
                           className="form-control form-control-lg"
                           placeholder="Password"
                           value={password}
                           onChange={e => setPassword( e.target.value )}
                    />
                  </fieldset>
                </fieldset>
                <button className="btn btn-lg btn-primary pull-xs-right"
                        type="submit"
                        disabled={isLoading}
                >
                  {pageTitle}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
  );
};

export default Authentication;